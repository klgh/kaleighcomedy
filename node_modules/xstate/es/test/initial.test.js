import { Machine } from '../src';
import { assert } from 'chai';
var config = {
    initial: 'a',
    states: {
        a: {
            initial: 'b',
            states: {
                b: {
                    initial: 'c',
                    states: {
                        c: {}
                    }
                }
            }
        },
        leaf: {}
    }
};
var deepMachine = /*#__PURE__*/Machine(config);
var parallelDeepMachine = /*#__PURE__*/Machine({
    type: 'parallel',
    states: {
        foo: config,
        bar: config
    }
});
var deepParallelMachine = /*#__PURE__*/Machine({
    initial: 'one',
    states: {
        one: parallelDeepMachine.config,
        two: parallelDeepMachine.config
    }
});
describe('Initial states', function () {
    it('should return the correct initial state', function () {
        assert.deepEqual(deepMachine.initialState.value, { a: { b: 'c' } });
    });
    it('should return the correct initial state (parallel)', function () {
        assert.deepEqual(parallelDeepMachine.initialState.value, {
            foo: { a: { b: 'c' } },
            bar: { a: { b: 'c' } }
        });
    });
    it('should return the correct initial state (deep parallel)', function () {
        assert.deepEqual(deepParallelMachine.initialState.value, {
            one: {
                foo: { a: { b: 'c' } },
                bar: { a: { b: 'c' } }
            }
        });
    });
    it('should return undefined for leaf nodes', function () {
        assert.throws(function () {
            return deepMachine.states.leaf.initialState;
        });
    });
});
//# sourceMappingURL=initial.test.js.map