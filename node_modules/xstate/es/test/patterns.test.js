var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { assert } from 'chai';
// import { Machine, State } from '../src/index';
import { toggle, sequence } from '../src/patterns';
import { Machine } from '../src';
describe('patterns', function () {
    describe('toggle pattern', function () {
        it('should produce a partial state machine with a binary toggle', function () {
            assert.deepEqual(toggle('on', 'off', 'SWITCH'), {
                on: { on: { SWITCH: 'off' } },
                off: { on: { SWITCH: 'on' } }
            });
        });
    });
    describe('sequence pattern', function () {
        it('should work with an array', function () {
            var seq = ['one', 'two', 'three', 'last'];
            var sequenceMachine = Machine(__assign({ id: 'sequence' }, sequence(seq)));
            assert.deepEqual(sequenceMachine.transition(seq[0], 'NEXT').value, seq[1]);
            assert.deepEqual(sequenceMachine.transition(seq[1], 'PREV').value, seq[0]);
            assert.deepEqual(sequenceMachine.transition(seq[seq.length - 1], 'NEXT').value, seq[seq.length - 1]);
            assert.deepEqual(sequenceMachine.transition(seq[0], 'PREV').value, seq[0]);
        });
        it('should customize the next/prev events', function () {
            var seq = ['one', 'two', 'three', 'last'];
            var sequenceMachine = Machine(__assign({ id: 'sequence' }, sequence(seq, {
                nextEvent: 'FORWARD',
                prevEvent: 'BACK'
            })));
            assert.deepEqual(sequenceMachine.transition(seq[0], 'NEXT').value, seq[0]);
            assert.deepEqual(sequenceMachine.transition(seq[1], 'PREV').value, seq[1]);
            assert.deepEqual(sequenceMachine.transition(seq[0], 'FORWARD').value, seq[1]);
            assert.deepEqual(sequenceMachine.transition(seq[1], 'BACK').value, seq[0]);
        });
        it('should allow next/prev events to be undefined', function () {
            var seq = ['one', 'two', 'three', 'last'];
            var sequenceMachine = Machine(__assign({ id: 'sequence' }, sequence(seq, {
                nextEvent: 'FORWARD',
                prevEvent: undefined
            })));
            assert.deepEqual(sequenceMachine.transition(seq[0], 'FORWARD').value, seq[1]);
            assert.deepEqual(sequenceMachine.transition(seq[1], 'BACK').value, seq[1]);
            var backSequenceMachine = Machine(__assign({ id: 'backSequence' }, sequence(seq, {
                nextEvent: undefined,
                prevEvent: 'BACK'
            })));
            assert.deepEqual(backSequenceMachine.transition(seq[0], 'FORWARD').value, seq[0]);
            assert.deepEqual(backSequenceMachine.transition(seq[1], 'BACK').value, seq[0]);
        });
    });
});
//# sourceMappingURL=patterns.test.js.map