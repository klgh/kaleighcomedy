var __read = this && this.__read || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
        e = { error: error };
    } finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = this && this.__spread || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { assert } from 'chai';
import { Machine } from '../src';
import { getConfiguration } from '../src/stateUtils';
var testMachine = /*#__PURE__*/Machine({
    id: 'a',
    initial: 'b1',
    states: {
        b1: {
            id: 'b1',
            type: 'parallel',
            states: {
                c1: {
                    id: 'c1',
                    initial: 'd1',
                    states: {
                        d1: { id: 'd1' },
                        d2: {
                            id: 'd2',
                            initial: 'e1',
                            states: {
                                e1: { id: 'e1' },
                                e2: { id: 'e2' }
                            }
                        }
                    }
                },
                c2: { id: 'c2' },
                c3: {
                    id: 'c3',
                    initial: 'd3',
                    states: {
                        d3: { id: 'd3' },
                        d4: {
                            id: 'd4',
                            initial: 'e3',
                            states: {
                                e3: { id: 'e3' },
                                e4: { id: 'e4' }
                            }
                        }
                    }
                }
            }
        },
        b2: {
            id: 'b2',
            initial: 'c4',
            states: {
                c4: { id: 'c4' }
            }
        },
        b3: {
            id: 'b3',
            initial: 'c5',
            states: {
                c5: { id: 'c5' },
                c6: {
                    id: 'c6',
                    type: 'parallel',
                    states: {
                        d5: { id: 'd5' },
                        d6: { id: 'd6' },
                        d7: { id: 'd7' }
                    }
                }
            }
        }
    }
});
describe('algorithm', function () {
    it('getConfiguration', function () {
        var prevNodes = testMachine.getStateNodes({
            b1: {
                c1: 'd1',
                c2: {},
                c3: 'd3'
            }
        });
        var nodes = ['c1', 'd4'].map(function (id) {
            return testMachine.getStateNodeById(id);
        });
        var c = getConfiguration(prevNodes, nodes);
        assert.sameMembers(__spread(c).map(function (sn) {
            return sn.id;
        }), ['a', 'b1', 'c1', 'c2', 'c3', 'd1', 'd4', 'e3']);
    });
});
//# sourceMappingURL=algorithm.test.js.map