import { assert } from 'chai';
import { matchesState } from '../src';
export function testMultiTransition(machine, fromState, eventTypes) {
    var resultState = eventTypes.split(/,\s?/).reduce(function (state, eventType) {
        if (typeof state === 'string' && state[0] === '{') {
            state = JSON.parse(state);
        }
        var nextState = machine.transition(state, eventType);
        return nextState;
    }, fromState);
    return resultState;
}
export function testAll(machine, expected) {
    Object.keys(expected).forEach(function (fromState) {
        Object.keys(expected[fromState]).forEach(function (eventTypes) {
            var toState = expected[fromState][eventTypes];
            it("should go from " + fromState + " to " + JSON.stringify(toState) + " on " + eventTypes, function () {
                var resultState = testMultiTransition(machine, fromState, eventTypes);
                if (toState === undefined) {
                    // undefined means that the state didn't transition
                    assert.isEmpty(resultState.actions);
                    assert.isFalse(resultState.changed);
                } else if (typeof toState === 'string') {
                    assert.ok(matchesState(toState, resultState.value), JSON.stringify(resultState.value) + " does not match " + toState);
                } else {
                    assert.deepEqual(resultState.value, toState);
                }
            });
        });
    });
}
//# sourceMappingURL=utils.js.map