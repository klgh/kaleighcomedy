var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { assert } from 'chai';
import { Machine, assign } from '../src/index';
var counterMachine = /*#__PURE__*/Machine({
    initial: 'counting',
    context: { count: 0, foo: 'bar' },
    states: {
        counting: {
            on: {
                INC: [{
                    target: 'counting',
                    actions: [/*#__PURE__*/assign(function (xs) {
                        return {
                            count: xs.count + 1
                        };
                    })]
                }],
                DEC: [{
                    target: 'counting',
                    actions: [/*#__PURE__*/assign({
                        count: function (xs) {
                            return xs.count - 1;
                        }
                    })]
                }],
                WIN_PROP: [{
                    target: 'counting',
                    actions: [/*#__PURE__*/assign({
                        count: function () {
                            return 100;
                        },
                        foo: function () {
                            return 'win';
                        }
                    })]
                }],
                WIN_STATIC: [{
                    target: 'counting',
                    actions: [/*#__PURE__*/assign({
                        count: 100,
                        foo: 'win'
                    })]
                }],
                WIN_MIX: [{
                    target: 'counting',
                    actions: [/*#__PURE__*/assign({
                        count: function () {
                            return 100;
                        },
                        foo: 'win'
                    })]
                }],
                WIN: [{
                    target: 'counting',
                    actions: [/*#__PURE__*/assign(function () {
                        return {
                            count: 100,
                            foo: 'win'
                        };
                    })]
                }],
                SET_MAYBE: [{
                    actions: [/*#__PURE__*/assign({
                        maybe: 'defined'
                    })]
                }]
            }
        }
    }
});
describe('assign', function () {
    it('applies the assignment to the external state (property assignment)', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'DEC');
        assert.deepEqual(oneState.value, 'counting');
        assert.deepEqual(oneState.context, { count: -1, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'DEC');
        assert.deepEqual(twoState.value, 'counting');
        assert.deepEqual(twoState.context, { count: -2, foo: 'bar' });
    });
    it('applies the assignment to the external state', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'INC');
        assert.deepEqual(oneState.value, 'counting');
        assert.deepEqual(oneState.context, { count: 1, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'INC');
        assert.deepEqual(twoState.value, 'counting');
        assert.deepEqual(twoState.context, { count: 2, foo: 'bar' });
    });
    it('applies the assignment to multiple properties (property assignment)', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN_PROP');
        assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to multiple properties (static)', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN_STATIC');
        assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to multiple properties (static + prop assignment)', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN_MIX');
        assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to multiple properties', function () {
        var nextState = counterMachine.transition(counterMachine.initialState, 'WIN');
        assert.deepEqual(nextState.context, { count: 100, foo: 'win' });
    });
    it('applies the assignment to the explicit external state (property assignment)', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'DEC', { count: 50, foo: 'bar' });
        assert.deepEqual(oneState.value, 'counting');
        assert.deepEqual(oneState.context, { count: 49, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'DEC');
        assert.deepEqual(twoState.value, 'counting');
        assert.deepEqual(twoState.context, { count: 48, foo: 'bar' });
        var threeState = counterMachine.transition(twoState, 'DEC', {
            count: 100,
            foo: 'bar'
        });
        assert.deepEqual(threeState.value, 'counting');
        assert.deepEqual(threeState.context, { count: 99, foo: 'bar' });
    });
    it('applies the assignment to the explicit external state', function () {
        var oneState = counterMachine.transition(counterMachine.initialState, 'INC', { count: 50, foo: 'bar' });
        assert.deepEqual(oneState.value, 'counting');
        assert.deepEqual(oneState.context, { count: 51, foo: 'bar' });
        var twoState = counterMachine.transition(oneState, 'INC');
        assert.deepEqual(twoState.value, 'counting');
        assert.deepEqual(twoState.context, { count: 52, foo: 'bar' });
        var threeState = counterMachine.transition(twoState, 'INC', {
            count: 102,
            foo: 'bar'
        });
        assert.deepEqual(threeState.value, 'counting');
        assert.deepEqual(threeState.context, { count: 103, foo: 'bar' });
    });
    it('should maintain state after unhandled event', function () {
        var initialState = counterMachine.initialState;
        var nextState = counterMachine.transition(initialState, 'FAKE_EVENT');
        assert.isDefined(nextState.context);
        assert.deepEqual(nextState.context, { count: 0, foo: 'bar' });
    });
    it('sets undefined properties', function () {
        var initialState = counterMachine.initialState;
        var nextState = counterMachine.transition(initialState, 'SET_MAYBE');
        assert.isDefined(nextState.context.maybe);
        assert.deepEqual(nextState.context, {
            count: 0,
            foo: 'bar',
            maybe: 'defined'
        });
    });
});
describe('custom updater', function () {
    var updates = [];
    var updaterMachine = Machine({
        id: 'updater',
        initial: 'active',
        context: { count: 0 },
        states: {
            active: {
                on: {
                    EVENT: {
                        actions: [assign({
                            count: function (ctx) {
                                return ctx.count + 2;
                            }
                        }), assign({
                            count: function (ctx) {
                                return ctx.count * 2;
                            }
                        })]
                    }
                }
            }
        }
    }, {
        updater: function (ctx, _, actions) {
            var newCtx = __assign({}, ctx);
            actions.forEach(function (action) {
                Object.keys(action.assignment).forEach(function (key) {
                    newCtx[key] = action.assignment[key](newCtx);
                    // Custom functionality
                    updates.push(newCtx[key]);
                });
            });
            return newCtx;
        }
    });
    it('should allow a custom updater to update state context', function () {
        var newState = updaterMachine.transition(updaterMachine.initialState, 'EVENT');
        assert.deepEqual(newState.context, { count: 4 });
        assert.deepEqual(updates, [2, 4]);
    });
});
//# sourceMappingURL=assign.test.js.map