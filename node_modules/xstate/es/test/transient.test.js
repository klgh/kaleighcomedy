import { Machine } from '../src/index';
import { assert } from 'chai';
import { assign } from '../src/actions';
var greetingContext = { hour: 10 };
var greetingMachine = /*#__PURE__*/Machine({
    key: 'greeting',
    initial: 'pending',
    context: greetingContext,
    states: {
        pending: {
            on: {
                '': [{ target: 'morning', cond: function (ctx) {
                        return ctx.hour < 12;
                    } }, { target: 'afternoon', cond: function (ctx) {
                        return ctx.hour < 18;
                    } }, { target: 'evening' }]
            }
        },
        morning: {},
        afternoon: {},
        evening: {}
    },
    on: {
        CHANGE: { actions: /*#__PURE__*/assign({ hour: 20 }) },
        RECHECK: '#greeting'
    }
});
describe('transient states (eventless transitions)', function () {
    var updateMachine = Machine({
        initial: 'G',
        states: {
            G: {
                on: { UPDATE_BUTTON_CLICKED: 'E' }
            },
            E: {
                on: {
                    // eventless transition
                    '': [{ target: 'D', cond: function (_a) {
                            var data = _a.data;
                            return !data;
                        } }, { target: 'B', cond: function (_a) {
                            var status = _a.status;
                            return status === 'Y';
                        } }, { target: 'C', cond: function (_a) {
                            var status = _a.status;
                            return status === 'X';
                        } }, { target: 'F' // default, or just the string 'F'
                    }]
                }
            },
            D: {},
            B: {},
            C: {},
            F: {}
        }
    });
    it('should choose the first candidate target that matches the cond (D)', function () {
        var nextState = updateMachine.transition('G', 'UPDATE_BUTTON_CLICKED', {
            data: false
        });
        assert.equal(nextState.value, 'D');
    });
    it('should choose the first candidate target that matches the cond (B)', function () {
        var nextState = updateMachine.transition('G', 'UPDATE_BUTTON_CLICKED', {
            data: true,
            status: 'Y'
        });
        assert.equal(nextState.value, 'B');
    });
    it('should choose the first candidate target that matches the cond (C)', function () {
        var nextState = updateMachine.transition('G', 'UPDATE_BUTTON_CLICKED', {
            data: true,
            status: 'X'
        });
        assert.equal(nextState.value, 'C');
    });
    it('should choose the final candidate without a cond if none others match', function () {
        var nextState = updateMachine.transition('G', 'UPDATE_BUTTON_CLICKED', {
            data: true,
            status: 'other'
        });
        assert.equal(nextState.value, 'F');
    });
    it('should carry actions from previous transitions within same step', function () {
        var machine = Machine({
            initial: 'A',
            states: {
                A: {
                    onExit: 'exit_A',
                    on: {
                        TIMER: {
                            target: 'T',
                            actions: ['timer']
                        }
                    }
                },
                T: {
                    on: {
                        '': [{ target: 'B' }]
                    }
                },
                B: {
                    onEntry: 'enter_B'
                }
            }
        });
        var state = machine.transition('A', 'TIMER');
        assert.deepEqual(state.actions.map(function (a) {
            return a.type;
        }), ['exit_A', 'timer', 'enter_B']);
    });
    it('should execute all internal events one after the other', function () {
        var machine = Machine({
            type: 'parallel',
            states: {
                A: {
                    initial: 'A1',
                    states: {
                        A1: {
                            on: {
                                E: 'A2'
                            }
                        },
                        A2: {
                            onEntry: {
                                type: 'xstate.raise',
                                event: 'INT1'
                            }
                        }
                    }
                },
                B: {
                    initial: 'B1',
                    states: {
                        B1: {
                            on: {
                                E: 'B2'
                            }
                        },
                        B2: {
                            onEntry: {
                                type: 'xstate.raise',
                                event: 'INT2'
                            }
                        }
                    }
                },
                C: {
                    initial: 'C1',
                    states: {
                        C1: {
                            on: {
                                INT1: 'C2',
                                INT2: 'C3'
                            }
                        },
                        C2: {
                            on: {
                                INT2: 'C4'
                            }
                        },
                        C3: {
                            on: {
                                INT1: 'C4'
                            }
                        },
                        C4: {}
                    }
                }
            }
        });
        var state = machine.transition(machine.initialState, 'E');
        assert.deepEqual(state.value, { A: 'A2', B: 'B2', C: 'C4' });
    });
    it('should execute all eventless transitions in the same microstep', function () {
        var machine = Machine({
            type: 'parallel',
            states: {
                A: {
                    initial: 'A1',
                    states: {
                        A1: {
                            on: {
                                E: 'A2' // the external event
                            }
                        },
                        A2: {
                            on: {
                                '': 'A3'
                            }
                        },
                        A3: {
                            on: {
                                '': {
                                    target: 'A4',
                                    in: 'B.B3'
                                }
                            }
                        },
                        A4: {}
                    }
                },
                B: {
                    initial: 'B1',
                    states: {
                        B1: {
                            on: {
                                E: 'B2'
                            }
                        },
                        B2: {
                            on: {
                                '': {
                                    target: 'B3',
                                    in: 'A.A2'
                                }
                            }
                        },
                        B3: {
                            on: {
                                '': {
                                    target: 'B4',
                                    in: 'A.A3'
                                }
                            }
                        },
                        B4: {}
                    }
                }
            }
        });
        var state = machine.transition(machine.initialState, 'E');
        assert.deepEqual(state.value, { A: 'A4', B: 'B4' });
    });
    it('should check for automatic transitions even after microsteps are done', function () {
        var machine = Machine({
            type: 'parallel',
            states: {
                A: {
                    initial: 'A1',
                    states: {
                        A1: {
                            on: {
                                A: 'A2'
                            }
                        },
                        A2: {}
                    }
                },
                B: {
                    initial: 'B1',
                    states: {
                        B1: {
                            on: {
                                '': {
                                    target: 'B2',
                                    cond: function (_xs, _e, _a) {
                                        var s = _a.state;
                                        return s.matches('A.A2');
                                    }
                                }
                            }
                        },
                        B2: {}
                    }
                },
                C: {
                    initial: 'C1',
                    states: {
                        C1: {
                            on: {
                                '': {
                                    target: 'C2',
                                    in: 'A.A2'
                                }
                            }
                        },
                        C2: {}
                    }
                }
            }
        });
        var state = machine.initialState; // A1, B1, C1
        state = machine.transition(state, 'A'); // A2, B2, C2
        assert.deepEqual(state.value, { A: 'A2', B: 'B2', C: 'C2' });
    });
    it('should determine the resolved initial state from the transient state', function () {
        assert.deepEqual(greetingMachine.initialState.value, 'morning');
    });
    // TODO: determine proper behavior here -
    // Should an internal transition on the parent node activate the parent node
    // or all previous state nodes?
    xit('should determine the resolved state from a root transient state', function () {
        var morningState = greetingMachine.initialState;
        assert.deepEqual(morningState.value, 'morning');
        var stillMorningState = greetingMachine.transition(morningState, 'CHANGE');
        assert.deepEqual(stillMorningState.value, 'morning');
        var eveningState = greetingMachine.transition(stillMorningState, 'RECHECK');
        assert.deepEqual(eveningState.value, 'evening');
    });
});
//# sourceMappingURL=transient.test.js.map